PARSER_BEGIN(Assignment)
import java.util.*;

public class Assignment {

	//Storage of all the function names
	static List<String> functionNames = new ArrayList<String>();


    public static void main(String args [])   {
        //Reading in the PLM code to be parsed
        Assignment parser = new Assignment(System.in);

		//Run the starting product rule, and catch any errors that are thrown in the product rules
		try {
			parser.Run();
		} catch (ParseException pe) {
			System.out.println("FAIL");
			// System.err.println(pe.currentToken.beginLine);
			System.err.println(pe.getMessage());
			System.exit(0);
		}
		
		System.out.println("FUNCTION NAMES IN PROGRAM");
		for (String s : functionNames) {
			System.out.println(s);
		}
		
    }
   
}

PARSER_END(Assignment)

//Tokens representing constitutent parts of the program
TOKEN: { <LEFTBRACKET: "(" > }
TOKEN: { <RIGHTBRACKET: ")" > }
TOKEN: { <LEFTCURLYBRACKET: "{" > }
TOKEN: { <RIGHTCURLYBRACKET: "}" > }
TOKEN: { <SPACE: " " > }
TOKEN: { <DEF: "DEF" > }
TOKEN: { <MAIN: "MAIN" > }
TOKEN: { <FUNCNAME: ( <UPPERCHAR> )+ > }
TOKEN: { <PARAMETER: ( <LOWERCHAR> )+ > }
TOKEN: { <FUNCBODY: "x+4" > }
TOKEN: { <EOL: ";" ("\n" | "\r\n" | "\r") > }
//No need to specify an end of file token, already implemented in JavaCC

//Operators (adddition and multiplication)
TOKEN: { <ADDITION: "+" > }
TOKEN: { <MULTIPLICATION: "*" > }

//Allowable characters in variable names and numbers for arguments
TOKEN: { <UPPERCHAR: ["A"-"Z"] > }
TOKEN: { <LOWERCHAR: ["a"-"z"] > }
TOKEN: { <DIGIT:     ["0"-"9"] > }


void Run():  { Token token; } 
{
   (
		<DEF>
		<SPACE>
		//Either MAIN or UPPERCASESTR
		(
			token = <FUNCNAME>
			StandardFunction()
			|
			token = <MAIN>
			MainFunction()
		)
		<EOL>
	)+
   <EOF>

   //Check if the MAIN function is defined, all valid PLM programs have a MAIN
   {
		if (!functionNames.contains("MAIN")) {
			throw new ParseException("No MAIN function is defined (Rule 10)");
		}
   }
   
}

/**
 * A function definition for any function which isnt the main function
 * These functions has one parameter
 */
void StandardFunction() : { Token token; }
{
	<SPACE>
	<PARAMETER>
	<SPACE>
	<LEFTCURLYBRACKET>
	<SPACE>
	<FUNCBODY>
	<SPACE>
	<RIGHTCURLYBRACKET>
	<SPACE>
}

/**
 * A function definition for the main function - one without a parameter
 */
void MainFunction() : {}
{
	<SPACE>
	<LEFTCURLYBRACKET>
	<SPACE>
	<FUNCBODY>
	<SPACE>
	<RIGHTCURLYBRACKET>
	<SPACE>
}
