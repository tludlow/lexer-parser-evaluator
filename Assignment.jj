PARSER_BEGIN(Assignment)
import java.util.*;

public class Assignment {

	//Context for checking rules of the PLM program
	public static List<PLMFunction> functions = new ArrayList<PLMFunction>();

	//The stack of calls being made in the program, used to evaluate nested functions
	//Use of a stack was done in DIS last year when we made our own simple calculator, this is
	//used here too because it allows for nested calls and can check for divergence
	public static Stack<FunctionCall> callStack = new Stack<FunctionCall>();

	//A collection of all calls made in the program, used for context and evaluation...
	public static List<FunctionCall> functionCalls = new ArrayList<FunctionCall>();

    public static void main(String args [])   {
        //Reading in the PLM code to be parsed
		Assignment parser = new Assignment(System.in);
		

		//Run the starting product rule, and catch any errors that are thrown in the product rules
		try {
			parser.PLMProgram();
		} catch (ParseException pe) {
			System.out.println("FAIL");
			// System.err.println(pe.tokenImage).toString();
			System.err.println(pe.currentToken.beginLine);
			System.err.println(pe.getMessage());
			System.exit(0);
		}

		//Ensure that the parameter provided in the function bodies matches that of the one in the definition
		for (PLMFunction func : functions) {
			String parameter = func.parameter;
			System.out.println(func.name + "(" + func.parameter + ")" + " ==  " + func.body);
		}

		//Check if the main function exists
		boolean mainExists = false;
		for (PLMFunction func : functions) {
			if (func.name.equals("MAIN")) {
				mainExists = true;
				break;
			}
		}

		if (!mainExists) {
			System.out.println("FAIL");
			System.err.println("0");
			System.err.println("MAIN function not defined");
			System.exit(0);
		}


		//Succesfull PLM program, now we can run main with no value provided, aka 0....
		System.out.println("PASS");
		for (PLMFunction func : functions) {
			if (func.name == "MAIN") {
				//Run the MAIN function without an parameter/argument definition, it doesnt have one...
				System.out.println(func.evaluate(0));
			}
		}

	}


	/**
	 * Most of the error handling in JavaCC is terrible, however the ParseException and Token classes
	 * provide the means to generate nice errors. We will use their methods, in the following function to
	 * produce a nice error output of the form:
	 * LINE NUMBER
	 * What was expcted, what was received
	 */

	public String handleError(ParseException pe) {
		return "wow";
	}
}

/**
 * PLM function bodies are a construction of items, all of which are nodes in the program AST
 * which can be evaluated() to determine the value of the function. Three types of Item
 * exist within a PLM program, these are: INTEGER_LITERAL, PARAMETER, FUNCTION_CALLS
 * therefore you can chain these together with operators (+ and *) to generate positive integers
 * therefore an interface is implemented to allow for the productions of such nicely.
 */
interface Item {
	//Evaluate the Item to produce an integer - which in the PLM context are only ever positive integers
	//Need to store the valid parameter everytime because context not provided by default
	public int evaluate(int argValue);
}

/**
 * PLMFunction - A function within the PLM language
 */
class PLMFunction {
	//The name of the function, this is either MAIN or a user defined UPPERCHAR string
	public String name;
	//When the function is user defined it has a parameter, a lowercase string - MAIN FUNCS NULL
	public String parameter;
	//The body of the function which is an expression, as defined in the grammar below.
	public Item body;

	public int lineNumber;

	public PLMFunction(String name, String parameter, Item body, int lineNumber) {
		this.name = name;
		this.parameter = parameter;
		this.body = body;
		this.lineNumber = lineNumber;
	}

	public int evaluate(int argValue) {
		//This is essentially calling evaluate on the root of a subtree of the AST
		//This will cause the expression Items to be evaluated individually and built back up
		return this.body.evaluate(argValue);
	}

	public String toString() {
		return "[FUNCTION] name=" + name + " parameter=" + parameter + " body=" + body;
	}
}

/**
 * Integer literal items, when evaluated should return their value
 */
class IntegerLiteral implements Item {
	//The actual integer being represented by the object
	public int val;

	public IntegerLiteral(int val) {
		this.val = val;
	}

	//Just return the value of the object, this is just a number nothing special needed.
	//The argument validParameter only used for more complex scenarios
	public int evaluate(int argValue) {
		return this.val;
	}

	public String toString() {
		return Integer.toString(val);
	}
}


/**
 * Parameter items, when evaluated should take the given argument as their result
 */
class Parameter implements Item {
	public String param;

	public Parameter(String param) {
		this.param = param;
	}

	public int evaluate(int argValue) {
		return argValue;
	}

	public String toString() {
		return param;
	}
}

/**
 * Function call items, when evaluated should evaluate their argument then run the argument on their expression
 */
class FunctionCall implements Item {
	public String functionName;
	public Item argumentExpression;

	public FunctionCall(String functionName, Item argumentExpression) {
		//System.out.println("Call to function " + functionName + " made with argument " + argument);
		this.functionName = functionName;
		this.argumentExpression = argumentExpression;
	}

	/**
	 * Evaluating the function call using the argument provided
	 * We must first evaluate the argument and then evaluate the function with the
	 * argument provided where the placeholder was
	 */
	public int evaluate(int argValue) {
		//Divergence check is done here, we need to make sure no identifcal calls are made previously on the stack
		int positionOfCall = Assignment.callStack.search(this);
		if (positionOfCall != -1) {
			//This call has been made before, this is a divergence...
			System.out.println("DIVERGENCE");
			System.exit(0);
		}

		//This is not a recursive loop, thank god...
		//Therefore we can push this function call to the stack
		Assignment.callStack.push(this);

		//Evaluate the expression provided within the function call brackets
		int evaluatedArg = argumentExpression.evaluate(argValue);

		//Find the function being called within the known functions
		PLMFunction foundFunc = null;
		for (PLMFunction func : Assignment.functions) {
			if (func.name.equals(this.functionName)) {
				foundFunc = func;
				break;
			}
		}

		//Evaluate the function using the evaluated call argument and the function found from our context
		int functionEvaluation = foundFunc.evaluate(evaluatedArg);
		
		//This function will be at the top of the stack once its evaluated, hopefully.
		//Remove this so we can continue and get no recursion errors
		Assignment.callStack.pop();

		return functionEvaluation;
	}

	public String toString() {
		return "FUNCTION CALL: " + functionName;
	}
}

/**
 * Multipurpose expression class which represents both multiplication and addition.
 */
enum ExpressionType {
	MULTIPLICATION,
	ADDITION
}

/**
 * An expression in the language, this is essentially an Item(+/-)Item
 */
class Expression implements Item {
	public Item lhs;
	public Item rhs;
	public ExpressionType type;

	public Expression(Item lhs, Item rhs, ExpressionType type) {
		this.lhs = lhs;
		this.rhs = rhs;
		this.type = type;
	}

	//Essentially performing an in-order traversal of the AST to evaluate expressions
	//Evaluate the left node, add/multiply whatever the right node contains
	public int evaluate(int argValue) {
		if (this.type == ExpressionType.MULTIPLICATION) {
			return lhs.evaluate(argValue) * rhs.evaluate(argValue);
		} else {
			return lhs.evaluate(argValue) + rhs.evaluate(argValue);
		}
	}

	public String toString() {
		if (this.type == ExpressionType.MULTIPLICATION) {
			return lhs + "*" + rhs;
		} else {
			return lhs + "+" + rhs;
		}
	}
}
PARSER_END(Assignment)

/**
 *  The grammar for the assignment is essentially the following:
 * 		plmprogram = ( function )+
 * 		function = DEF (MAIN | UPPERCHARS lowerparam) { expression } ;
 * 		expression = term(+ term)*
 * 		term = item(multiplication item)*
 * 		item = INTEGER_LITERAL | PARAMETER | UPPERCHARS(expression)
 * 
 * 
 * 	The expression calculates the additive first because this means that the multiplicatives
 * 	which have higher precedence are calculated first in the AST (think the sums being at the top
 *  of the tree and the products being near the leaves, as required for in-order calculation )
 * 
 * 	As JJTree is disallowed you cannot make rules which work as AST nodes and let it calculate
 * 	for you, therefore I will need to replicate this behaviour myself with a stack etc...
 * 	Information on how JJTree could be used here: https://www.cs.nmsu.edu/~rth/cs/cs471/InterpretersJavaCC.html
 * 	My solution is based on replicating this myself
 * 
 * 	The program has no built-in context, therefore java util objects will need to be used
 * 	to store data, allowing for checks to be made where context is needed.
 */


//Tokens representing constitutent parts of the prograTOKEN: { <LEFTBRACKET: "(" > }
TOKEN: { <LEFTBRACKET: "(" > }
TOKEN: { <RIGHTBRACKET: ")" > }
TOKEN: { <LEFTCURLYBRACKET: "{" > }
TOKEN: { <RIGHTCURLYBRACKET: "}" > }
TOKEN: { <SPACE: " " > }
TOKEN: { <DEF: "DEF" > }
TOKEN: { <MAIN: "MAIN" > }
TOKEN: { <FUNCNAME: ( <UPPERCHAR> )+ > }
//Used to detect parameters in function definitions and arguments in function calls
TOKEN: { <PARAMETER: ( <LOWERCHAR> )+ > }
TOKEN: { <INTEGER_LITERAL: ( <DIGIT> )+ > }
TOKEN: { <SEMICOLON: ";" > }
TOKEN: { <EOL: ("\n" | "\r\n" | "\r") > }

TOKEN: { <ADDITION: "+" > }
TOKEN: { <MULTIPLICATION: "*" > }

TOKEN: { <UPPERCHAR: ["A"-"Z"] > }
TOKEN: { <LOWERCHAR: ["a"-"z"] > }
TOKEN: { <DIGIT:     ["0"-"9"] > }


/**
 * The PLM language is a sequence of one or more PLM functions, where one must be the main function.
 * This is defined as below with context checks done in the Assignment class to ensure
 * no duplicates and MAIN is defined.
 */
void PLMProgram(): { PLMFunction plmFunc; }
{
	( 
		plmFunc = FunctionDef()
		//Each time a function is read, we store it in the function list for context purposes
		{ functions.add(plmFunc); }
	)+
	<EOF>
}

/**
 * PLM Functions are the constituent parts of a PLM program, these are either user defined
 * or the main function, which has no parameter. These are defined as such
 */
PLMFunction FunctionDef(): { Token funcName; Token parameter; String parameterString = ""; Item additiveExpression; }
{
	<DEF> <SPACE>
	(
		funcName = <MAIN>
		|
		funcName = <FUNCNAME> <SPACE> 
		parameter = <PARAMETER>
		{ parameterString = parameter.image; }
	)
	<SPACE> 
	<LEFTCURLYBRACKET>
	<SPACE>

	//The function body is an additive expression therefore we match for that here.
	//This has its own "complex" production rules because it has many varieties.
	additiveExpression = MatchAdditiveExpression(parameterString)
	
	<SPACE>
	<RIGHTCURLYBRACKET>
	<SPACE>
	<SEMICOLON>
	<EOL>

	{ return new PLMFunction(funcName.image, parameterString, additiveExpression, Assignment.functions.size()+1); }
}

/**
 * 3 types of terms exist within a PLM program, these are:
 *  - INTEGER_LITERAL
 *  - PARAMETER
 *  - FUNCTION_CALL
 * 
 * 	This production matches the term with the type and generates the correct
 * 	AST object so it can be evaluated later in the program
 */
Item MatchItem(String validParameter): { Token token; Item argumentExpression; }
{	
	//INTEGER LITERAL ITEM MATCHING
	token = <INTEGER_LITERAL>
	{ return new IntegerLiteral(Integer.parseInt(token.image)); }

	|

	//PARAMETER ITEM MATCHING
	token = <PARAMETER>
	{ return new Parameter(token.image); }

	|

	//FUNCTION CALL ITEM MATCHING
	token = <FUNCNAME> <LEFTBRACKET> argumentExpression = MatchAdditiveExpression(validParameter) <RIGHTBRACKET>
	{ 
		//Make a new call to this function with the arguments it has been given in the matching.
		FunctionCall fCall = new FunctionCall(token.image, argumentExpression);
		Assignment.functionCalls.add(fCall);
		return fCall;
	}

}


/**
 * The structure of a function body is an expression, we match the LHS, either an
 * multiplication expression or an item and then we pass that on to the sum matcher.
 */
Item MatchAdditiveExpression(String validParameter): { Item bodyExpression;}
{
	bodyExpression = MatchProductExpression(validParameter)
	bodyExpression = MatchSum(validParameter, bodyExpression)
	{
		return bodyExpression;
	}
}

/**
 * The matching of an item operand and a multiplicative operator.
 */
Item MatchProductExpression(String validParameter): { Item multiplicativeExpression; }
{
	multiplicativeExpression = MatchItem(validParameter)
	multiplicativeExpression = MatchProduct(validParameter, multiplicativeExpression)
	{
		return multiplicativeExpression;
	}
}

/**
 * Already have an ITEM/MultiplicativeExpression so want to match with a + and another Item
 */
Item MatchSum(String validParameter, Item expression): { Item sum; }
{
	( <ADDITION> sum = MatchProductExpression(validParameter) 
		{ expression = new Expression(expression, sum, ExpressionType.ADDITION); }
	)*

	{
		return expression;
	}
}

/**
 * Already have an ITEM/MultiplicativeExpression so want to match with a + and another Item
 */
Item MatchProduct(String validParameter, Item expression): { Item multiply; }
{
	( <MULTIPLICATION> multiply = MatchItem(validParameter) 
		{ expression = new Expression(expression, multiply, ExpressionType.MULTIPLICATION); }
	)*

	{
		return expression;
	}
}